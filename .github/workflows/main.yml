name: Docker with Continuous Logging
'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      part:
        description: 'Part number (01, 02, etc.)'
        required: false
        default: '01'

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      tunnel_url: ${{ steps.setup_tunnel.outputs.tunnel_url }}
      logs_tunnel_url: ${{ steps.setup_logs_tunnel.outputs.logs_tunnel_url }}
      deployment_success: ${{ steps.container_start.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: '${{ secrets.DOCKERHUB_USERNAME }}'
          password: '${{ secrets.DOCKERHUB_TOKEN }}'

      - name: Pull Docker image
        run: 'docker pull ${{ secrets.DOCKERHUB_IMAGE_URL }}:latest'

      - name: List Docker images
        run: 'docker images ${{ secrets.DOCKERHUB_IMAGE_URL }}'  

      - name: Setup logging directories
        run: |
          mkdir -p ~/logs
          mkdir -p ~/cloudflared
          touch ~/logs/app.log
          touch ~/logs/monitor.log
          touch ~/cloudflared/tunnel.log
          echo "Logging setup complete"

      - name: Install Cloudflared
        run: |
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/
          echo "Cloudflared installed"

      - name: Start Docker container with logging
        id: container_start
        run: |
          echo "Starting container..."
          docker run -d \
            -p 5001:5001 \
            --name api-container \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_IMAGE_URL }}:latest
          
          echo "Container started, waiting for initialization..."
          sleep 15
          
          # Test container
          if docker ps | grep -q api-container; then
            echo "Container is running"
            docker logs api-container
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "Container failed to start"
            docker ps -a
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Start background log monitoring
        run: |
          # Create background monitoring script
          cat > ~/monitor.sh << 'EOF'
          #!/bin/bash
          while true; do
            echo "=== $(date) ===" >> ~/logs/monitor.log
            
            # Check container status
            if docker ps | grep -q api-container; then
              echo "Container: RUNNING" >> ~/logs/monitor.log
              docker logs api-container --tail 10 >> ~/logs/app.log 2>&1
            else
              echo "Container: STOPPED" >> ~/logs/monitor.log
              docker ps -a | grep api-container >> ~/logs/monitor.log
            fi
            
            # Rotate logs if too large (>10MB)
            for logfile in ~/logs/*.log; do
              if [ -f "$logfile" ] && [ $(stat -c%s "$logfile" 2>/dev/null || echo 0) -gt 10485760 ]; then
                mv "$logfile" "${logfile}.$(date +%s)"
                touch "$logfile"
              fi
            done
            
            sleep 30
          done
          EOF
          
          chmod +x ~/monitor.sh
          ~/monitor.sh &
          echo "Background monitoring started"

      - name: Setup Cloudflare tunnel for main app
        id: setup_tunnel
        run: |
          echo "Starting Cloudflare tunnel for main application..."
          cloudflared tunnel --url http://localhost:5001 --logfile ~/cloudflared/tunnel.log --loglevel debug &
          TUNNEL_PID=$!
          echo "TUNNEL_PID=$TUNNEL_PID" >> $GITHUB_ENV
          
          # Wait for tunnel initialization
          sleep 20
          
          # Extract tunnel URL
          if [ -f ~/cloudflared/tunnel.log ]; then
            TUNNEL_URL=$(grep -o 'https://[a-zA-Z0-9.-]*\.trycloudflare\.com' ~/cloudflared/tunnel.log | tail -1)
            
            if [ -n "$TUNNEL_URL" ]; then
              echo "Main App Tunnel URL: $TUNNEL_URL"
              echo "TUNNEL_URL=$TUNNEL_URL" >> $GITHUB_ENV
              echo "tunnel_url=$TUNNEL_URL" >> $GITHUB_OUTPUT
              echo "::notice::Application available at: $TUNNEL_URL"
            else
              echo "Failed to get main tunnel URL"
              cat ~/cloudflared/tunnel.log
            fi
          else
            echo "Main tunnel log file not found"
          fi

      - name: Setup Cloudflare tunnel for log server
        id: setup_logs_tunnel
        run: |
          echo "Starting Cloudflare tunnel for log server..."
          cloudflared tunnel --url http://localhost:8080 --logfile ~/cloudflared/logs_tunnel.log --loglevel debug &
          LOGS_TUNNEL_PID=$!
          echo "LOGS_TUNNEL_PID=$LOGS_TUNNEL_PID" >> $GITHUB_ENV
          
          # Wait for logs tunnel initialization
          sleep 20
          
          # Extract logs tunnel URL
          if [ -f ~/cloudflared/logs_tunnel.log ]; then
            LOGS_TUNNEL_URL=$(grep -o 'https://[a-zA-Z0-9.-]*\.trycloudflare\.com' ~/cloudflared/logs_tunnel.log | tail -1)
            
            if [ -n "$LOGS_TUNNEL_URL" ]; then
              echo "Logs Tunnel URL: $LOGS_TUNNEL_URL"
              echo "LOGS_TUNNEL_URL=$LOGS_TUNNEL_URL" >> $GITHUB_ENV
              echo "logs_tunnel_url=$LOGS_TUNNEL_URL" >> $GITHUB_OUTPUT
              echo "::notice::Logs dashboard available at: $LOGS_TUNNEL_URL"
            else
              echo "Failed to get logs tunnel URL"
              cat ~/cloudflared/logs_tunnel.log
            fi
          else
            echo "Logs tunnel log file not found"
          fi

      - name: Test application and log server
        run: |
          echo "Testing application and log server..."
          
          # Test local connections
          echo "Testing local connections:"
          curl -s http://localhost:5001/ || echo "Local app test failed"
          curl -s http://localhost:8080/status || echo "Local log server test failed"
          
          # Test tunnel connections
          if [ -n "${{ env.TUNNEL_URL }}" ]; then
            echo "Testing main app tunnel:"
            sleep 10
            curl -s ${{ env.TUNNEL_URL }}/ || echo "Main tunnel test failed"
          fi
          
          if [ -n "${{ env.LOGS_TUNNEL_URL }}" ]; then
            echo "Testing logs tunnel:"
            sleep 5
            curl -s ${{ env.LOGS_TUNNEL_URL }}/status || echo "Logs tunnel test failed"
          fi

      - name: Update repository status in flask_github_manager_final
        if: success() && env.TUNNEL_URL != ''
        run: |
          # Get the repository name from the GitHub repository
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)

          # Create JSON payload with updated status and cloudflare tunnel URL
          JSON_PAYLOAD=$(cat << EOF
          {
            "repository_name": "$REPO_NAME",
            "status": "Active",
            "cloudflare_tunnel_url": "${{ env.TUNNEL_URL }}"
          }
          EOF
          )

          # Send POST request to update the repository status
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            https://update-repository-status.vercel.app/api/update_repository_status

          echo "::notice::Repository status updated in flask_github_manager_final"

      - name: Start log display service
        run: |
          # Enhanced HTTP server to display logs with auto-refresh
          cat > ~/log_server.py << 'EOF'
          #!/usr/bin/env python3
          import http.server
          import socketserver
          import os
          import json
          from datetime import datetime
          
          class LogHandler(http.server.SimpleHTTPRequestHandler):
              def do_GET(self):
                  if self.path == '/':
                      self.send_response(200)
                      self.send_header('Content-type', 'text/html')
                      self.end_headers()
                      
                      html_content = '''
                      <!DOCTYPE html>
                      <html>
                      <head>
                          <title>Application Logs</title>
                          <meta http-equiv="refresh" content="10">
                          <style>
                              body { font-family: monospace; background: #000; color: #0f0; padding: 20px; }
                              .container { max-width: 1200px; margin: 0 auto; }
                              .section { margin: 20px 0; padding: 10px; border: 1px solid #333; }
                              .section h2 { color: #ff0; margin-top: 0; }
                              pre { background: #111; padding: 10px; overflow-x: auto; white-space: pre-wrap; }
                              .nav { margin-bottom: 20px; }
                              .nav a { color: #0ff; margin-right: 20px; text-decoration: none; }
                              .nav a:hover { text-decoration: underline; }
                              .timestamp { color: #888; font-size: 0.9em; }
                          </style>
                      </head>
                      <body>
                          <div class="container">
                              <h1>🚀 Application Monitoring Dashboard</h1>
                              <div class="timestamp">Last updated: ''' + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + ''' UTC (Auto-refresh: 10s)</div>
                              
                              <div class="nav">
                                  <a href="/">Dashboard</a>
                                  <a href="/logs">Raw App Logs</a>
                                  <a href="/monitor">Monitor Logs</a>
                                  <a href="/tunnel">Tunnel Logs</a>
                                  <a href="/status">JSON Status</a>
                              </div>
                              
                              <div class="section">
                                  <h2>📊 Current Status</h2>
                                  <pre id="status">Loading...</pre>
                              </div>
                              
                              <div class="section">
                                  <h2>📋 Recent Application Logs (Last 50 lines)</h2>
                                  <pre id="applogs">Loading...</pre>
                              </div>
                              
                              <div class="section">
                                  <h2>🔍 Monitor Logs (Last 30 lines)</h2>
                                  <pre id="monitorlogs">Loading...</pre>
                              </div>
                          </div>
                          
                          <script>
                              function loadContent() {
                                  fetch('/status').then(r => r.text()).then(data => {
                                      document.getElementById('status').textContent = data;
                                  }).catch(e => {
                                      document.getElementById('status').textContent = 'Error loading status: ' + e;
                                  });
                                  
                                  fetch('/logs').then(r => r.text()).then(data => {
                                      const lines = data.split('\\n');
                                      document.getElementById('applogs').textContent = lines.slice(-50).join('\\n');
                                  }).catch(e => {
                                      document.getElementById('applogs').textContent = 'Error loading logs: ' + e;
                                  });
                                  
                                  fetch('/monitor').then(r => r.text()).then(data => {
                                      const lines = data.split('\\n');
                                      document.getElementById('monitorlogs').textContent = lines.slice(-30).join('\\n');
                                  }).catch(e => {
                                      document.getElementById('monitorlogs').textContent = 'Error loading monitor logs: ' + e;
                                  });
                              }
                              
                              loadContent();
                              setInterval(loadContent, 5000); // Refresh every 5 seconds
                          </script>
                      </body>
                      </html>
                      '''
                      self.wfile.write(html_content.encode())
                  
                  elif self.path == '/logs':
                      self.send_response(200)
                      self.send_header('Content-type', 'text/plain')
                      self.send_header('Access-Control-Allow-Origin', '*')
                      self.end_headers()
                      
                      try:
                          with open(os.path.expanduser('~/logs/app.log'), 'r') as f:
                              content = f.read()
                              self.wfile.write(content.encode())
                      except:
                          self.wfile.write(b'No logs available')
                  
                  elif self.path == '/monitor':
                      self.send_response(200)
                      self.send_header('Content-type', 'text/plain')
                      self.send_header('Access-Control-Allow-Origin', '*')
                      self.end_headers()
                      
                      try:
                          with open(os.path.expanduser('~/logs/monitor.log'), 'r') as f:
                              content = f.read()
                              self.wfile.write(content.encode())
                      except:
                          self.wfile.write(b'No monitor logs available')
                  
                  elif self.path == '/tunnel':
                      self.send_response(200)
                      self.send_header('Content-type', 'text/plain')
                      self.send_header('Access-Control-Allow-Origin', '*')
                      self.end_headers()
                      
                      try:
                          with open(os.path.expanduser('~/cloudflared/tunnel.log'), 'r') as f:
                              content = f.read()
                              self.wfile.write(content.encode())
                      except:
                          self.wfile.write(b'No tunnel logs available')
                  
                  elif self.path == '/status':
                      self.send_response(200)
                      self.send_header('Content-type', 'text/plain')
                      self.send_header('Access-Control-Allow-Origin', '*')
                      self.end_headers()
                      
                      try:
                          # Check container status
                          container_running = os.system('docker ps | grep -q api-container') == 0
                          
                          status_text = f"""Container Status: {'RUNNING' if container_running else 'STOPPED'}
          Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} UTC
          Tunnel URL: {os.environ.get('TUNNEL_URL', 'Not available')}
          Log Server: Running on port 8080
          
          Log File Sizes:"""
          
                          # Get log file sizes
                          log_dir = os.path.expanduser('~/logs')
                          if os.path.exists(log_dir):
                              for filename in os.listdir(log_dir):
                                  filepath = os.path.join(log_dir, filename)
                                  if os.path.isfile(filepath):
                                      size = os.path.getsize(filepath)
                                      status_text += f"\n  {filename}: {size} bytes"
                          
                          self.wfile.write(status_text.encode())
                      except Exception as e:
                          self.wfile.write(f'Error getting status: {str(e)}'.encode())
                  
                  else:
                      self.send_response(404)
                      self.send_header('Content-type', 'text/plain')
                      self.end_headers()
                      self.wfile.write(b'404 - Not Found\n\nAvailable endpoints:\n/\n/logs\n/monitor\n/tunnel\n/status')
          
          with socketserver.TCPServer(("", 8080), LogHandler) as httpd:
              print(f"Log server running on port 8080")
              httpd.serve_forever()
          EOF
          
          # Start log server in background
          python3 ~/log_server.py &
          echo "Enhanced log server started on port 8080"

      - name: Display access information
        run: |
          echo "========================================"
          echo "🚀 APPLICATION ACCESS INFORMATION"
          echo "========================================"
          echo "📱 Main Application: ${{ env.TUNNEL_URL }}"
          echo "📊 Logs Dashboard:   ${{ env.LOGS_TUNNEL_URL }}"
          echo ""
          echo "📋 Available Log Endpoints:"
          echo "   • Dashboard:      ${{ env.LOGS_TUNNEL_URL }}/"
          echo "   • App Logs:       ${{ env.LOGS_TUNNEL_URL }}/logs"
          echo "   • Monitor Logs:   ${{ env.LOGS_TUNNEL_URL }}/monitor"
          echo "   • Tunnel Logs:    ${{ env.LOGS_TUNNEL_URL }}/tunnel"
          echo "   • Status JSON:    ${{ env.LOGS_TUNNEL_URL }}/status"
          echo ""
          echo "🔧 Container Status:"
          docker ps | grep api-container || echo "Container not running"
          echo ""
          echo "📄 Recent Application Logs:"
          docker logs api-container --tail 10 || echo "Cannot fetch logs"
          echo ""
          echo "🌐 Tunnel Process Status:"
          ps aux | grep cloudflared | grep -v grep || echo "No tunnel processes found"

      - name: Monitor and keep alive
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Starting 30-minute monitoring session..."
          
          # Monitor for 30 minutes with status updates every 2 minutes
          for i in {1..15}; do
            echo ""
            echo "=== Status Update $i/15 ($(date)) ==="
            
            # Container status
            if docker ps | grep -q api-container; then
              echo "✓ Container is running"
            else
              echo "✗ Container is not running"
              docker ps -a | grep api-container
            fi
            
            # Tunnel connectivity tests
            echo "Testing tunnel connectivity:"
            if [ -n "${{ env.TUNNEL_URL }}" ]; then
              MAIN_HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.TUNNEL_URL }}/ || echo "000")
              echo "  Main App: HTTP $MAIN_HTTP_CODE"
            fi
            
            if [ -n "${{ env.LOGS_TUNNEL_URL }}" ]; then
              LOGS_HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.LOGS_TUNNEL_URL }}/ || echo "000")
              echo "  Logs Dashboard: HTTP $LOGS_HTTP_CODE"
            fi
            
            # Recent logs
            echo "Recent container output:"
            docker logs api-container --tail 3 2>&1 | head -3
            
            # Log file sizes
            echo "Log file sizes:"
            ls -lh ~/logs/*.log 2>/dev/null | awk '{print $5, $9}' || echo "No log files"
            
            echo "Waiting 2 minutes..."
            sleep 120
          done
          
          echo "Monitoring session complete"

      - name: Collect final logs
        if: always()
        run: |
          echo "Collecting final logs..."
          
          mkdir -p ~/final_logs
          
          # Copy all logs including tunnel logs
          cp ~/logs/*.log ~/final_logs/ 2>/dev/null || echo "No app logs to copy"
          cp ~/cloudflared/tunnel.log ~/final_logs/main_tunnel.log 2>/dev/null || echo "No main tunnel log to copy"
          cp ~/cloudflared/logs_tunnel.log ~/final_logs/logs_tunnel.log 2>/dev/null || echo "No logs tunnel log to copy"
          
          # Get final container state
          echo "=== Final Container Status ===" > ~/final_logs/container_status.txt
          docker ps -a >> ~/final_logs/container_status.txt
          
          echo "=== Final Container Logs ===" > ~/final_logs/final_container.log
          docker logs api-container >> ~/final_logs/final_container.log 2>&1 || echo "Cannot get container logs"
          
          # Create summary
          echo "Workflow: ${{ github.workflow }}" > ~/final_logs/summary.txt
          echo "Run ID: ${{ github.run_id }}" >> ~/final_logs/summary.txt
          echo "Repository: ${{ github.repository }}" >> ~/final_logs/summary.txt
          echo "Tunnel URL: ${{ env.TUNNEL_URL }}" >> ~/final_logs/summary.txt
          echo "Logs Tunnel URL: ${{ env.LOGS_TUNNEL_URL }}" >> ~/final_logs/summary.txt
          echo "Timestamp: $(date)" >> ~/final_logs/summary.txt
          
          echo "Final logs collected:"
          ls -la ~/final_logs/

      - name: Archive logs
        if: always()
        run: |
          # Create tar archive of all logs
          cd ~
          tar -czf workflow-logs-${{ github.run_id }}.tar.gz final_logs/
          
          echo "Log archive created:"
          ls -lh workflow-logs-*.tar.gz
          
          # Display archive contents
          echo "Archive contents:"
          tar -tzf workflow-logs-${{ github.run_id }}.tar.gz

      - name: Sleep before next iteration
        run: |
          echo "Deployment completed successfully."
          echo "Main App URL: ${{ env.TUNNEL_URL }}"
          echo "Logs Dashboard URL: ${{ env.LOGS_TUNNEL_URL }}"
          echo "Sleeping for 5 hours before triggering next build..."
          sleep 18000
          echo "5-hour wait completed. Ready to trigger next build."

  trigger_next_chunk:
    needs: deploy
    runs-on: ubuntu-latest
    if: ${{ always() && needs.deploy.result == 'success' }}
    steps:
      - name: Trigger next chunk or complete
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const currentPart = "${{ github.event.inputs.part || '01' }}";
            let nextPartNumber;

            console.log(`Current part: ${currentPart}`);

            if (currentPart === "all") {
              console.log("Initial 'all' detected, starting with part 001.");
              nextPartNumber = 1;
            } else {
              nextPartNumber = parseInt(currentPart) + 1;
            }

            console.log(`Next part number: ${nextPartNumber}`);

            if (nextPartNumber <= 63000000) { 
              const nextPartStr = String(nextPartNumber).padStart(3, '0');
              console.log(`Triggering next chunk: ${nextPartStr}`);
              
              try {
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'main.yml',
                  ref: 'main',
                  inputs: { 
                    part: nextPartStr 
                  }
                });
                console.log(`Successfully triggered workflow for part ${nextPartStr}`);
              } catch (error) {
                console.error(`Failed to trigger workflow: ${error.message}`);
                throw error;
              }
            } else {
              console.log("All chunks processed. Workflow sequence completed.");
            }
